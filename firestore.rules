rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset allows public read access to products, but restricts write access.
     * @path /products/{productId}
     * @allow (get, list): Allows any user to read product information.
     * @allow (create, update, delete): // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create): if false; // Placeholder: Replace with owner-based validation after schema update.
     * @deny (update): if false; // Placeholder: Replace with owner-based validation after schema update.
     * @deny (delete): if false; // Placeholder: Replace with owner-based validation after schema update.
     * @principle Allows public read access while reserving write access for authorized users (e.g., admins or product owners) after the schema is updated with an ownership field.
     */
    match /products/{productId} {
      allow get, list: if true;
      // CRITICAL: Cannot implement owner-only writes. The 'Product' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description This ruleset allows public read access to categories, but restricts write access.
     * @path /categories/{categoryId}
     * @allow (get, list): Allows any user to read category information.
     * @allow (create, update, delete): // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create): if false; // Placeholder: Replace with owner-based validation after schema update.
     * @deny (update): if false; // Placeholder: Replace with owner-based validation after schema update.
     * @deny (delete): if false; // Placeholder: Replace with owner-based validation after schema update.
     * @principle Allows public read access while reserving write access for authorized users (e.g., admins or category managers) after the schema is updated with an ownership field.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      // CRITICAL: Cannot implement owner-only writes. The 'Category' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description This ruleset enforces a user-ownership model for orders, ensuring only the authenticated user can access their own order data.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): Allows the owner to read their own order data.
     * @allow (create): Allows the owner to create order data with validated customerId.
     * @allow (update): Allows the existing owner to update their own order data.
     * @allow (delete): Allows the existing owner to delete their own order data.
     * @deny: For all other cases, the rule denies access.
     * @principle Enforces path-based ownership, preventing unauthorized access to order information. Validates relational integrity by ensuring the 'customerId' matches the 'userId' in the path.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.customerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description This ruleset enforces a user-ownership model for order items, ensuring only the authenticated user can access their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list): Allows the owner to read their own order item data.
     * @allow (create): Allows the owner to create order item data.
     * @allow (update): Allows the existing owner to update their own order item data.
     * @allow (delete): Allows the existing owner to delete their own order item data.
     * @deny: For all other cases, the rule denies access.
     * @principle Enforces path-based ownership, preventing unauthorized access to order item information.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description This ruleset enforces a user-ownership model for customer profiles, ensuring only the authenticated user can access their own profile data.
     * @path /users/{userId}
     * @allow (get): Allows the owner to get their own profile data.
     * @allow (create): Allows a user to create their own profile if the userId matches the authenticated user's UID.
     * @allow (update): Allows the existing owner to update their own profile data.
     * @allow (delete): Allows the existing owner to delete their own profile data.
     * @principle Enforces path-based ownership, preventing unauthorized access to customer information.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description This ruleset restricts access to promo codes.
     * @path /promoCodes/{promoCodeId}
     * @allow (get, list): Allows any user to read promo code information.
     * @deny (create, update, delete): if false;
     * @principle Allows public read access while completely restricting write access for now.
     */
    match /promoCodes/{promoCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}