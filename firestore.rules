/**
 * Core Philosophy: This ruleset enforces a user-ownership model for user-specific data (orders, customer profiles)
 * and allows public read access to product and category information. Administrative privileges are not defined.
 *
 * Data Structure:
 * - /products/{productId}: Public product catalog.
 * - /categories/{categoryId}: Public list of product categories.
 * - /users/{userId}/orders/{orderId}: Orders belonging to a specific user.
 * - /users/{userId}: Customer profile for a specific user.
 * - /promoCodes/{promoCodeId}: Public list of available promo codes.
 *
 * Key Security Decisions:
 * - Users can only manage their own orders and profiles.
 * - Product and category information is publicly readable, but write access is not granted.
 * - Listing of users is not permitted, due to privacy concerns.
 *
 * Denormalization for Authorization:
 * - User-specific data is stored under /users/{userId} to simplify authorization checks.
 *
 * Structural Segregation:
 * - Private user data (orders) and public data (products, categories) are in separate collections to improve list operation security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product information, but restricts modifications.
     * @path /products/{productId}
     * @allow (get, list): Allows any user (or no user) to read any product.
     * @allow (create, update, delete): No write access is granted.
     * @deny (create, update, delete): All write requests are denied for everyone.
     * @principle Public read, no writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read product categories, but restricts modifications.
     * @path /categories/{categoryId}
     * @allow (get, list): Allows any user (or no user) to read any category.
     * @allow (create, update, delete): No write access is granted.
     * @deny (create, update, delete): All write requests are denied for everyone.
     * @principle Public read, no writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures order data to the owning user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, list, update, delete): Allows the user with ID {userId} to manage their own orders.
     * @deny (create, get, list, update, delete): Denies access to any other user.
     * @principle Enforces path-based ownership for user-specific order data.
     */
    match /users/{userId}/orders/{orderId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures order item data to the owning user.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create, get, list, update, delete): Allows the user with ID {userId} to manage their own order items.
     * @deny (create, get, list, update, delete): Denies access to any other user.
     * @principle Enforces path-based ownership for user-specific order item data.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Restricts access to user documents to the owning user.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId; // Self-creation rule
     * @allow get, list, update, delete: if isSignedIn() && request.auth.uid == userId;
     * @deny list: if false;
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow get, update, delete: if isSignedIn() && request.auth.uid == userId;
        allow list: if false;
    }

    /**
     * @description Allows anyone to read promotional codes, but restricts modifications.
     * @path /promoCodes/{promoCodeId}
     * @allow (get, list): Allows any user (or no user) to read any promo code.
     * @allow (create, update, delete): No write access is granted.
     * @deny (create, update, delete): All write requests are denied for everyone.
     * @principle Public read, no writes.
     */
    match /promoCodes/{promoCodeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

    function isSignedIn() {
        return request.auth != null;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }
}