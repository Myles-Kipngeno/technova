/**
 * @fileoverview Firestore Security Rules for TechNova Electronics Online.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (customers, orders, order items), while allowing public read access to
 * products and categories. Write access to products, categories and promocodes
 * is not granted in this prototyping ruleset, and needs to be implemented.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable product information.
 * - /categories/{categoryId}: Publicly readable category information.
 * - /users/{userId}: Customer profile information, accessible only to the user.
 * - /users/{userId}/orders/{orderId}: Order history, accessible only to the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order item details, accessible only to the user.
 * - /promoCodes/{promoCodeId}: Publicly readable promotional codes.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Products and categories are publicly readable.
 * - Listing of users and their associated subcollections is allowed only to the owner.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information. Write access is not granted in this prototyping phase.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No one can create, update, or delete products in this prototyping phase.
     * @principle Allows public read access to products while restricting write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to category information. Write access is not granted in this prototyping phase.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No one can create, update, or delete categories in this prototyping phase.
     * @principle Allows public read access to categories while restricting write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to customer profile information to the authenticated user.
     * @path /users/{userId}
     * @allow (create): The user can create their own profile if the userId matches their auth UID.
     * @allow (get, list): The user can read their own profile.
     * @allow (update, delete): The user can update or delete their own profile if it exists.
     * @deny All other operations.
     * @principle Enforces document ownership for customer profiles.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to order information to the authenticated user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): The user can read their own order information.
     * @allow (create): The user can create new orders under their own user ID.
     * @allow (update, delete): The user can update or delete their own orders if they exist.
     * @deny All other operations.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to order item information to the authenticated user.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list): The user can read their own order item information.
     * @allow (create): The user can create new order items under their own user ID and order ID.
     * @allow (update, delete): The user can update or delete their own order items if they exist.
     * @deny All other operations.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to promotional codes. Write access is not granted in this prototyping phase.
     * @path /promoCodes/{promoCodeId}
     * @allow (get, list): Any user can read promo code information.
     * @deny (create, update, delete): No one can create, update, or delete promo codes in this prototyping phase.
     * @principle Allows public read access to promo codes while restricting write access.
     */
    match /promoCodes/{promoCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}